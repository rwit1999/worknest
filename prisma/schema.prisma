// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Job{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String // id of user who created the job
  title String
  description String?
  short_description String?
  imageUrl String?
  companyId String? @db.ObjectId
  company Company? @relation(fields: [companyId],references: [id]) // companyId of Job references id of Company
  isPublished Boolean @default(false) 
  tags String[]
  savedUsers String[]
  shiftTiming String?
  hourlyRate String?
  yearsOfExperience String?
  workMode String?
  categoryId String? @db.ObjectId
  category Category? @relation(fields: [categoryId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@index([categoryId])
  // This creates an index on the categoryId field in the Job table. An index is a data structure that improves the speed of data retrieval for specific queries. In this case, it helps with queries that search or filter jobs by their categoryId.
  @@index([companyId])
}

model Category{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  jobs Job[] // a category can be present in many jobs but one job will have only one category
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Company{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  name String
  description String?
  logo String?
  coverImage String?
  mail String?
  website String?
  linkedIn String?
  address_line_1 String?  
  address_line_2 String?  
  city String?
  state String?
  zipcode String?
  jobs Job[]
  followers String[]
  overview String?
  whyJoinUs String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserProfile{
  userId String @id @map("_id")
  fullName String?
  email String?
  contact String?
  appliedJobs AppliedJob[]
  resumes Resumes[]
  activeResumeId String?
}

type AppliedJob{
  jobId String
  appliedAt DateTime @default(now())
}

model Resumes{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url String
  userProfileId String
  userProfile UserProfile @relation(fields: [userProfileId],references: [userId],onDelete:Cascade)
  createdAt DateTime @default(now())
  @@index([userProfileId],name:"idx_userProfileId")
}